# Name of your application. Used to uniquely configure containers.
service: rails_api

# Name of the container image.
image: gogrow-dev/rails_api

# Deploy to these servers.
servers:
  web:
    - 127.0.0.1
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt (and allow for multiple apps on one server).
# If using something like Cloudflare, it is recommended to set encryption mode 
# in Cloudflare's SSL/TLS setting to "Full" to enable end-to-end encryption. 
proxy: 
  ssl: true
  hosts:
    - www.rails-api.com
    - rails-api.com
  # kamal-proxy connects to your container over port 80, use `app_port` to specify a different port.
  # app_port: 3000

# Credentials for your image host.
registry:
  server: <%= ENV['AWS_ACCOUNT_ID'] %>.dkr.ecr.<%= ENV['AWS_REGION'] %>.amazonaws.com
  username: AWS
  password: <%= %x(aws ecr get-login-password) %>

# Configure builder setup.
builder:
  arch: amd64

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - JWT_SECRET
    - DATABASE_URL
    - REDIS_URL
    - S3_ACCESS_KEY_ID
    - S3_ACCESS_KEY
    - S3_REGION
    - S3_BUCKET
    - SIDEKIQ_PASSWORD
    - SIDEKIQ_REDIS_URL
    - SECRET_KEY_BASE
  clear:
    RAILS_ENV: production
    SERVER_TIMING: true
    RAILS_LOG_LEVEL: debug
    SERVER_HOST: api.rails-api.com
    FRONTEND_URL: https://rails-api.com
    MAILER_SENDER: "Rails API <info@rails-api.com>"

    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    # SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use shared_spaces_api-db for a db accessory server on same machine via local kamal docker network.
    DB_HOST: DB_HOST

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
# volumes:
#   - 'rails_api_storage:/rails/storage'

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: postgres:17.0
#     host: 127.0.0.1
#     port: 127.0.0.1:5432:5432
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - POSTGRES_PASSWORD
#         - POSTGRES_USER
#         - POSTGRES_DB
#     files:
#       # - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     volumes:
#       - /var/lib/postgresql/data:/var/lib/postgresql/data
#   redis:
#     image: redis:latest
#     port: 6379
#     host: 127.0.0.1
#     volumes:
#       - /var/lib/redis:/data
